[
    {
        "id": "setupTab",
        "type": "tab",
        "label": "Setup",
        "disabled": false,
        "info": "One-time DB setup: tables, hypertable, sensors"
    },
    {
        "id": "ingestTab",
        "type": "tab",
        "label": "Ingest",
        "disabled": false,
        "info": "CSV & MQTT ingestion pipeline with metrics"
    },
    {
        "id": "apiTab",
        "type": "tab",
        "label": "API & Debug",
        "disabled": false,
        "info": "REST API and debug"
    },
    {
        "id": "052aec521515b111",
        "type": "mqtt-broker",
        "name": "",
        "broker": "digitalisation-aio-package-mosquitto-1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "fbd14997310e037a",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "postgres",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "05JD£AEBW2'f",
        "passwordFieldType": "str"
    },
    {
        "id": "comment_create_tables",
        "type": "comment",
        "z": "setupTab",
        "name": "Step: Create Tables",
        "info": "Enable Timescale and create sensors, sensor_data, ingestion_metrics, sensor_errors",
        "x": 200,
        "y": 60,
        "wires": []
    },
    {
        "id": "inject_create_tables",
        "type": "inject",
        "z": "setupTab",
        "name": "Trigger: Create Tables",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 200,
        "y": 100,
        "wires": [
            [
                "create_tables_pg"
            ]
        ]
    },
    {
        "id": "create_tables_pg",
        "type": "postgresql",
        "z": "setupTab",
        "name": "Create tables",
        "query": "-- Enable extension\nCREATE EXTENSION IF NOT EXISTS timescaledb;\n-- Dimension table\nCREATE TABLE IF NOT EXISTS sensors(id SERIAL PRIMARY KEY, type VARCHAR(50), location VARCHAR(50));\n-- Main data\nCREATE TABLE IF NOT EXISTS sensor_data(time TIMESTAMPTZ NOT NULL, sensor_id INTEGER, start_seconds INTEGER, end_seconds INTEGER, scientific_name VARCHAR(50), common_name VARCHAR(50), confidence DOUBLE PRECISION, FOREIGN KEY(sensor_id) REFERENCES sensors(id));\n-- Ingestion metrics\nCREATE TABLE IF NOT EXISTS ingestion_metrics(received_at timestamptz NOT NULL, inserted_at timestamptz NOT NULL);\n-- Error log\nCREATE TABLE IF NOT EXISTS sensor_errors(time timestamptz DEFAULT NOW(), error_msg text NOT NULL, raw_payload jsonb);",
        "postgreSQLConfig": "fbd14997310e037a",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 440,
        "y": 100,
        "wires": [
            [
                "debug_create_tables"
            ]
        ]
    },
    {
        "id": "debug_create_tables",
        "type": "debug",
        "z": "setupTab",
        "name": "Debug Create",
        "active": true,
        "tosidebar": true,
        "complete": "true",
        "x": 700,
        "y": 100,
        "wires": []
    },
    {
        "id": "comment_hypertable",
        "type": "comment",
        "z": "setupTab",
        "name": "Step: Create Hypertable",
        "info": "Convert sensor_data to TimescaleDB hypertable",
        "x": 200,
        "y": 160,
        "wires": []
    },
    {
        "id": "inject_hypertable",
        "type": "inject",
        "z": "setupTab",
        "name": "Trigger: Hypertable",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 200,
        "y": 200,
        "wires": [
            [
                "hypertable_pg"
            ]
        ]
    },
    {
        "id": "hypertable_pg",
        "type": "postgresql",
        "z": "setupTab",
        "name": "Create Hypertable",
        "query": "SELECT create_hypertable('sensor_data','time', if_not_exists => TRUE);",
        "postgreSQLConfig": "fbd14997310e037a",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 440,
        "y": 200,
        "wires": [
            [
                "debug_hypertable"
            ]
        ]
    },
    {
        "id": "debug_hypertable",
        "type": "debug",
        "z": "setupTab",
        "name": "Debug Hypertable",
        "active": true,
        "tosidebar": true,
        "complete": "true",
        "x": 700,
        "y": 200,
        "wires": []
    },
    {
        "id": "comment_insert_sensors",
        "type": "comment",
        "z": "setupTab",
        "name": "Step: Insert Sensors",
        "info": "Seed sensors table with initial devices",
        "x": 200,
        "y": 260,
        "wires": []
    },
    {
        "id": "inject_insert_sensors",
        "type": "inject",
        "z": "setupTab",
        "name": "Trigger: Insert Sensors",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 200,
        "y": 300,
        "wires": [
            [
                "insert_sensors_pg"
            ]
        ]
    },
    {
        "id": "insert_sensors_pg",
        "type": "postgresql",
        "z": "setupTab",
        "name": "Insert Sensors",
        "query": "INSERT INTO sensors(type, location) VALUES('frog-detector','AUVIC_Yirraba_11F'),('frog-detector','AUVIC_Yirraba_12A'),('frog-detector','FAKE_LOCATION_X'),('other-detector','FAKE_LOCATION_Y');",
        "postgreSQLConfig": "fbd14997310e037a",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 440,
        "y": 300,
        "wires": [
            [
                "debug_insert_sensors"
            ]
        ]
    },
    {
        "id": "debug_insert_sensors",
        "type": "debug",
        "z": "setupTab",
        "name": "Debug InsertSensors",
        "active": true,
        "tosidebar": true,
        "complete": "true",
        "x": 700,
        "y": 300,
        "wires": []
    },
    {
        "id": "comment_drop",
        "type": "comment",
        "z": "setupTab",
        "name": "Optional: Drop Tables",
        "info": "Reset schema: drops tables",
        "x": 200,
        "y": 360,
        "wires": []
    },
    {
        "id": "inject_drop",
        "type": "inject",
        "z": "setupTab",
        "name": "Trigger: Drop Tables",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 200,
        "y": 400,
        "wires": [
            [
                "drop_tables_pg"
            ]
        ]
    },
    {
        "id": "drop_tables_pg",
        "type": "postgresql",
        "z": "setupTab",
        "name": "Drop Tables",
        "query": "DROP TABLE IF EXISTS sensor_data CASCADE; DROP TABLE IF EXISTS sensors, ingestion_metrics, sensor_errors;",
        "postgreSQLConfig": "fbd14997310e037a",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 440,
        "y": 400,
        "wires": [
            [
                "debug_drop_tables"
            ]
        ]
    },
    {
        "id": "debug_drop_tables",
        "type": "debug",
        "z": "setupTab",
        "name": "Debug Drop",
        "active": true,
        "tosidebar": true,
        "complete": "true",
        "x": 700,
        "y": 400,
        "wires": []
    },
    {
        "id": "comment_ingest",
        "type": "comment",
        "z": "ingestTab",
        "name": "CSV & MQTT Input → Normalize → DB + Metrics",
        "info": "Unified ingestion path for edge devices",
        "x": 300,
        "y": 20,
        "wires": []
    },
    {
        "id": "inject_csv",
        "type": "inject",
        "z": "ingestTab",
        "name": "Trigger CSV Import",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 170,
        "y": 100,
        "wires": [
            [
                "read_csv"
            ]
        ]
    },
    {
        "id": "read_csv",
        "type": "file in",
        "z": "ingestTab",
        "name": "Read CSV File",
        "filename": "/data/sensor_data.csv",
        "filenameType": "str",
        "format": "utf8",
        "allProps": false,
        "x": 380,
        "y": 100,
        "wires": [
            [
                "csv_parser"
            ]
        ]
    },
    {
        "id": "csv_parser",
        "type": "csv",
        "z": "ingestTab",
        "name": "CSV Parser",
        "sep": ",",
        "hdrin": true,
        "hdrout": "parsed",
        "multi": "one",
        "ret": "\n",
        "skip": "0",
        "strings": true,
        "include_null_values": false,
        "x": 590,
        "y": 100,
        "wires": [
            [
                "normalize"
            ]
        ]
    },
    {
        "id": "inject_mqtt_test",
        "type": "inject",
        "z": "ingestTab",
        "name": "Trigger MQTT Test",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "frog-detector/data",
        "payload": "{ \"time\": \"2025-05-11T05:39:00Z\", \"sensor_id\": 1, \"start_seconds\":45, \"end_seconds\":48, \"scientific_name\": \"Geocrinia laevis\", \"common_name\": \"Southern Smooth Froglet\", \"confidence\": 0.9 }",
        "payloadType": "json",
        "x": 200,
        "y": 160,
        "wires": [
            [
                "mqtt_out"
            ]
        ]
    },
    {
        "id": "mqtt_out",
        "type": "mqtt out",
        "z": "ingestTab",
        "name": "MQTT Out",
        "topic": "frog-detector/data",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "052aec521515b111",
        "x": 390,
        "y": 280,
        "wires": []
    },
    {
        "id": "mqtt_in",
        "type": "mqtt in",
        "z": "ingestTab",
        "name": "MQTT In",
        "topic": "frog-detector/data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "052aec521515b111",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 440,
        "y": 180,
        "wires": [
            [
                "normalize"
            ]
        ]
    },
    {
        "id": "normalize",
        "type": "function",
        "z": "ingestTab",
        "name": "Normalize detection",
        "func": "// Normalize detection: extract true timestamp for CSV, use msg.payload.time for MQTT\nconst row = msg.payload;\nlet timeVal;\n\n// 1) If this row came from your CSV parser, it'll have a File field\nif (row.File) {\n  const filePath = row.File;\n  const parts   = filePath.split(/[_\\/\\\\]/);         // split on underscore or path separators\n  const dateStr = parts[parts.length - 2] || \"\";      // e.g. \"20240103\"\n  let   timeStr = (parts[parts.length - 1] || \"\")     // e.g. \"054000.WAV\"\n                    .replace(/\\.wav$/i, \"\");         // strip extension\n\n  if (dateStr.length === 8 && timeStr.length === 6) {\n    const y = dateStr.slice(0,4),\n          M = dateStr.slice(4,6),\n          d = dateStr.slice(6,8),\n          h = timeStr.slice(0,2),\n          m = timeStr.slice(2,4),\n          s = timeStr.slice(4,6);\n    timeVal = `${y}-${M}-${d} ${h}:${m}:${s}`;\n  }\n}\n\n// 2) Otherwise, if it came in from MQTT, use the time field\nif (!timeVal && row.time) {\n  timeVal = row.time;\n}\n\n// 3) Last resort: use now (only happens if neither File nor time were present)\nif (!timeVal) {\n  timeVal = new Date().toISOString();\n}\n\n// Build the rec and params exactly as before\nconst rec = {\n  time:            timeVal,\n  sensor_id:       row.sensor_id    || 1,\n  start_seconds:   parseInt(row[\"Start (s)\"])||row.start_seconds||0,\n  end_seconds:     parseInt(row[\"End (s)\"])  ||row.end_seconds  ||0,\n  scientific_name: row[\"Scientific name\"]    ||row.scientific_name,\n  common_name:     row[\"Common name\"]        ||row.common_name,\n  confidence:      parseFloat(row.Confidence)||row.confidence     ||0\n};\n\n// Pass both time and the other fields into msg.params for the INSERT\nmsg.params = [\n  rec.time,\n  rec.sensor_id,\n  rec.start_seconds,\n  rec.end_seconds,\n  rec.scientific_name,\n  rec.common_name,\n  rec.confidence\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 130,
        "wires": [
            [
                "stamp_receive"
            ]
        ]
    },
    {
        "id": "stamp_receive",
        "type": "function",
        "z": "ingestTab",
        "name": "Stamp received_at",
        "func": "msg.received_at=new Date().toISOString(); return msg;",
        "outputs": 1,
        "x": 1000,
        "y": 130,
        "wires": [
            [
                "insert_detection"
            ]
        ]
    },
    {
        "id": "insert_detection",
        "type": "postgresql",
        "z": "ingestTab",
        "name": "Insert detection row",
        "query": "INSERT INTO sensor_data(time,sensor_id,start_seconds,end_seconds,scientific_name,common_name,confidence) VALUES($1,$2,$3,$4,$5,$6,$7);",
        "postgreSQLConfig": "fbd14997310e037a",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 1220,
        "y": 130,
        "wires": [
            [
                "debug_insert",
                "prepare_latency_params"
            ]
        ]
    },
    {
        "id": "debug_insert",
        "type": "debug",
        "z": "ingestTab",
        "name": "Debug Insert",
        "active": true,
        "tosidebar": true,
        "complete": "true",
        "x": 1420,
        "y": 130,
        "wires": []
    },
    {
        "id": "prepare_latency_params",
        "type": "function",
        "z": "ingestTab",
        "name": "Prepare latency params",
        "func": "msg.params = [ msg.received_at ]; return msg;",
        "outputs": 1,
        "x": 1220,
        "y": 180,
        "wires": [
            [
                "log_latency"
            ]
        ]
    },
    {
        "id": "log_latency",
        "type": "postgresql",
        "z": "ingestTab",
        "name": "Log ingestion latency",
        "query": "INSERT INTO ingestion_metrics(received_at, inserted_at) VALUES($1, NOW());",
        "postgreSQLConfig": "fbd14997310e037a",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 1420,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "error_catch",
        "type": "catch",
        "z": "ingestTab",
        "name": "Catch errors",
        "scope": [
            "read_csv",
            "csv_parser",
            "normalize",
            "stamp_receive",
            "insert_detection"
        ],
        "x": 740,
        "y": 260,
        "wires": [
            [
                "format_error"
            ]
        ]
    },
    {
        "id": "format_error",
        "type": "function",
        "z": "ingestTab",
        "name": "Format error",
        "func": "msg.error_msg=msg.error.message||String(msg.error); msg.raw_payload={row:msg.payload}; return msg;",
        "outputs": 1,
        "x": 940,
        "y": 260,
        "wires": [
            [
                "log_error"
            ]
        ]
    },
    {
        "id": "log_error",
        "type": "postgresql",
        "z": "ingestTab",
        "name": "Log sensor_error",
        "query": "INSERT INTO sensor_errors(time,error_msg,raw_payload) VALUES(NOW(), $1, $2);",
        "postgreSQLConfig": "fbd14997310e037a",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 1140,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "comment_api",
        "type": "comment",
        "z": "apiTab",
        "name": "Expose /observations endpoint",
        "info": "HTTP GET with filters applied",
        "x": 300,
        "y": 40,
        "wires": []
    },
    {
        "id": "inject_api_test",
        "type": "inject",
        "z": "apiTab",
        "name": "Trigger API Test",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"start\":\"2023-10-19T00:00:00Z\",\"end\":\"2024-01-23T23:59:59Z\",\"species\":[\"Southern Smooth Froglet\"],\"exclude\":[],\"confidence_min\":0.6}",
        "payloadType": "json",
        "x": 300,
        "y": 80,
        "wires": [
            [
                "http_request"
            ]
        ]
    },
    {
        "id": "http_request",
        "type": "http request",
        "z": "apiTab",
        "name": "API Request",
        "method": "GET",
        "ret": "obj",
        "url": "http://localhost:1880/observations?start={{payload.start}}&end={{payload.end}}&species={{payload.species}}&exclude={{payload.exclude}}&confidence_min={{payload.confidence_min}}",
        "tls": "",
        "x": 520,
        "y": 80,
        "wires": [
            [
                "debug_api"
            ]
        ]
    },
    {
        "id": "http_in",
        "type": "http in",
        "z": "apiTab",
        "name": "GET /observations",
        "url": "/observations",
        "method": "get",
        "swaggerDoc": "",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "build_query"
            ]
        ]
    },
    {
        "id": "build_query",
        "type": "function",
        "z": "apiTab",
        "name": "Build SQL & Params",
        "func": "// Build SQL & Params\nconst q = msg.req.query;\nconst toArray = v => Array.isArray(v) ? v : v ? [v] : [];\n\n// 1) Parse & normalize start/end in full ISO 8601 (with Z)\nconst startDt = new Date(q.start);\nconst startIso = startDt.toISOString();\n\nconst endDt = new Date(q.end);\nendDt.setUTCDate(endDt.getUTCDate() + 1);      // INCLUDE the entire end-day\nconst endIso = endDt.toISOString();\n\n// 2) Prepare species/exclude as Postgres arrays\nconst speciesArr = toArray(q.species);\nconst excludeArr = toArray(q.exclude);\nconst speciesParam = '{' + speciesArr.join(',') + '}';\nconst excludeParam = '{' + excludeArr.join(',') + '}';\n\n// 3) Confidence floor\nconst conf = parseFloat(q.confidence_min) || 0;\n\n// 4) Build params & query\nmsg.params = [\n  startIso,        // $1\n  endIso,          // $2\n  speciesParam,    // $3\n  excludeParam,    // $4\n  conf             // $5\n];\n\nmsg.query = `\nSELECT time, sensor_id, start_seconds, end_seconds,\n       scientific_name, common_name, confidence\nFROM sensor_data\nWHERE time BETWEEN $1::timestamptz AND $2::timestamptz\n  AND common_name = ANY($3::text[])\n  AND common_name <> ALL($4::text[])\n  AND confidence >= $5\nORDER BY time;\n`;\n\n// 5) DEBUG LOGGING — uncomment these two lines to see exactly what you send:\n// node.warn(\"SQL → \" + msg.query);\n// node.warn(\"Params → \" + JSON.stringify(msg.params));\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 140,
        "wires": [
            [
                "api_pg"
            ]
        ]
    },
    {
        "id": "api_pg",
        "type": "postgresql",
        "z": "apiTab",
        "name": "Query observations",
        "query": "msg.query",
        "postgreSQLConfig": "fbd14997310e037a",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 700,
        "y": 140,
        "wires": [
            [
                "http_response",
                "debug_api"
            ]
        ]
    },
    {
        "id": "http_response",
        "type": "http response",
        "z": "apiTab",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 940,
        "y": 140,
        "wires": []
    },
    {
        "id": "debug_api",
        "type": "debug",
        "z": "apiTab",
        "name": "API Response",
        "active": true,
        "tosidebar": true,
        "complete": "payload",
        "x": 960,
        "y": 180,
        "wires": []
    }
]