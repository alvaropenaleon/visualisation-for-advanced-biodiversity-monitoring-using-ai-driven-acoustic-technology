[
    {
        "id": "dbSetupTab",
        "type": "tab",
        "label": "DB Setup",
        "disabled": false,
        "info": "Creates tables: sensors + sensor_data, then converts sensor_data into a hypertable."
    },
    {
        "id": "prepareSensorsTab",
        "type": "tab",
        "label": "Prepare Sensors",
        "disabled": false,
        "info": "Inserts sensor rows into the sensors table (dimension table)."
    },
    {
        "id": "csvImportTab",
        "type": "tab",
        "label": "CSV Import Flow",
        "disabled": false,
        "info": "Reads CSV data, extracts fields, inserts rows into sensor_data."
    },
    {
        "id": "29a92b2b2cca5fd8",
        "type": "tab",
        "label": "MQTT Demo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "052aec521515b111",
        "type": "mqtt-broker",
        "name": "",
        "broker": "digitalisation-aio-package-mosquitto-1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "fbd14997310e037a",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "digitalisation-aio-package-postgres-1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "05JDÂ£AEBW2'f",
        "passwordFieldType": "str"
    },
    {
        "id": "commentCreateTables",
        "type": "comment",
        "z": "dbSetupTab",
        "name": "Step 1: Create sensors + sensor_data Tables",
        "info": "Run this once to create the two tables in PostgreSQL.\nAlso enables Timescale extension (if not already).",
        "x": 210,
        "y": 60,
        "wires": []
    },
    {
        "id": "injectCreateTables",
        "type": "inject",
        "z": "dbSetupTab",
        "name": "Trigger: Create Tables",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "postgresqlCreateTables"
            ]
        ]
    },
    {
        "id": "postgresqlCreateTables",
        "type": "postgresql",
        "z": "dbSetupTab",
        "name": "",
        "query": "-- Enable Timescale (if not already)\nCREATE EXTENSION IF NOT EXISTS timescaledb;\n\n-- Create a dimension table for sensors\nCREATE TABLE IF NOT EXISTS sensors(\n    id SERIAL PRIMARY KEY,\n    type VARCHAR(50),\n    location VARCHAR(50)\n);\n\n-- Create a time-series table\nCREATE TABLE IF NOT EXISTS sensor_data (\n    time TIMESTAMPTZ NOT NULL,\n    sensor_id INTEGER,\n    start_seconds INTEGER,\n    end_seconds INTEGER,\n    scientific_name VARCHAR(50),\n    common_name VARCHAR(50),\n    confidence DOUBLE PRECISION,\n    FOREIGN KEY (sensor_id) REFERENCES sensors (id)\n);",
        "postgreSQLConfig": "fbd14997310e037a",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 430,
        "y": 120,
        "wires": [
            [
                "debugCreateTables"
            ]
        ]
    },
    {
        "id": "debugCreateTables",
        "type": "debug",
        "z": "dbSetupTab",
        "name": "Debug msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 120,
        "wires": []
    },
    {
        "id": "commentHypertable",
        "type": "comment",
        "z": "dbSetupTab",
        "name": "Step 2: Convert sensor_data to Hypertable",
        "info": "Run this after creating the table. This uses 'time' as the partition column.",
        "x": 200,
        "y": 200,
        "wires": []
    },
    {
        "id": "injectHypertable",
        "type": "inject",
        "z": "dbSetupTab",
        "name": "Trigger: Convert to Hypertable",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 180,
        "y": 260,
        "wires": [
            [
                "postgresqlHypertable"
            ]
        ]
    },
    {
        "id": "postgresqlHypertable",
        "type": "postgresql",
        "z": "dbSetupTab",
        "name": "",
        "query": "SELECT create_hypertable('sensor_data', 'time', if_not_exists => TRUE);",
        "postgreSQLConfig": "fbd14997310e037a",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 430,
        "y": 260,
        "wires": [
            [
                "debugHypertable"
            ]
        ]
    },
    {
        "id": "debugHypertable",
        "type": "debug",
        "z": "dbSetupTab",
        "name": "Debug msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 260,
        "wires": []
    },
    {
        "id": "72eacaffc26d48a9",
        "type": "inject",
        "z": "dbSetupTab",
        "name": "Trigger: Drop Tables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "d0e880e2ab35d326"
            ]
        ]
    },
    {
        "id": "d0e880e2ab35d326",
        "type": "postgresql",
        "z": "dbSetupTab",
        "name": "",
        "query": "DROP TABLE IF EXISTS sensor_data;\nDROP TABLE IF EXISTS sensors;",
        "postgreSQLConfig": "fbd14997310e037a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 430,
        "y": 400,
        "wires": [
            [
                "b90294df620ae895"
            ]
        ]
    },
    {
        "id": "b90294df620ae895",
        "type": "debug",
        "z": "dbSetupTab",
        "name": "Debug msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 400,
        "wires": []
    },
    {
        "id": "0f78ceea519bc95c",
        "type": "comment",
        "z": "dbSetupTab",
        "name": "Optional: Drop Tables",
        "info": "",
        "x": 140,
        "y": 340,
        "wires": []
    },
    {
        "id": "commentPrepareSensors",
        "type": "comment",
        "z": "prepareSensorsTab",
        "name": "Step 3: Insert sensor rows",
        "info": "Add a few rows to the sensors table, so we have sensor_id(s) to reference in sensor_data.\nIf you only have 1 device, you can keep just one row. If you'd like to simulate multiple sensors, add more.\n\nYou can skip this if you plan to dynamically insert sensors from Node-RED logic or CSV parse.",
        "x": 150,
        "y": 60,
        "wires": []
    },
    {
        "id": "injectPrepareSensors",
        "type": "inject",
        "z": "prepareSensorsTab",
        "name": "Trigger: Insert Sensors",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "postgresqlPrepareSensors"
            ]
        ]
    },
    {
        "id": "postgresqlPrepareSensors",
        "type": "postgresql",
        "z": "prepareSensorsTab",
        "name": "",
        "query": "-- Example: Insert multiple sensors\nINSERT INTO sensors (type, location)\nVALUES\n('frog-detector','AUVIC_Yirraba_11F'),\n('frog-detector','AUVIC_Yirraba_12A'),\n('frog-detector','FAKE_LOCATION_X'),\n('other-detector','FAKE_LOCATION_Y');\n",
        "postgreSQLConfig": "fbd14997310e037a",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 430,
        "y": 120,
        "wires": [
            [
                "debugPrepareSensors"
            ]
        ]
    },
    {
        "id": "debugPrepareSensors",
        "type": "debug",
        "z": "prepareSensorsTab",
        "name": "Debug msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 120,
        "wires": []
    },
    {
        "id": "commentCsvImport",
        "type": "comment",
        "z": "csvImportTab",
        "name": "Step 4: CSV Import Flow",
        "info": "Reads a CSV, extracts columns:\n- start_seconds\n- end_seconds\n- scientific_name\n- common_name\n- confidence\n- File\n\nParses the File path to deduce 'time' (timestamp) and possibly the sensor_id.\nThen inserts a row into sensor_data for each CSV line.\n\nAdapt the function node logic to suit your file path format.\nIf you only have 1 sensor, you can hard-code sensor_id=1.\nOtherwise, parse the location substring from the File name and do a lookup in the sensors table.\n",
        "x": 150,
        "y": 60,
        "wires": []
    },
    {
        "id": "fileInCsv",
        "type": "file in",
        "z": "csvImportTab",
        "name": "Read CSV File",
        "filename": "/data/sensor_data.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 380,
        "y": 160,
        "wires": [
            [
                "csvParser"
            ]
        ]
    },
    {
        "id": "csvParser",
        "type": "csv",
        "z": "csvImportTab",
        "name": "CSV Parser",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 570,
        "y": 160,
        "wires": [
            [
                "functionParseRow"
            ]
        ]
    },
    {
        "id": "functionParseRow",
        "type": "function",
        "z": "csvImportTab",
        "name": "Parse CSV Row -> INSERT statement",
        "func": "// Example CSV columns:\n// msg.payload = {\n//   'Start (s)': '3',\n//   'End (s)': '6',\n//   'Scientific name': 'Neobatrachus sudelli',\n//   'Common name': 'Sudells Frog',\n//   'Confidence': '0.5043',\n//   'File': 'E:/.../Crinia parinsignifera_Eastern..._20240103_054000.WAV'\n// }\n\n// 1) Convert numeric fields from string to number\nlet row = msg.payload;\n\n// parse ints/floats\nlet startSec = parseInt(row[\"Start (s)\"] || 0);\nlet endSec = parseInt(row[\"End (s)\"] || 0);\nlet conf = parseFloat(row[\"Confidence\"] || 0);\n\n// 2) Extract 'time' from row.File\n// e.g. \"..._20240103_054000.WAV\"\n// We'll do a simplistic approach:\n\nlet filePath = row[\"File\"] || \"\";\n\n// extract '20240103_054000'\n// split on underscore, assume last 2 parts are date/time\n// or use a regex. We'll do a quick hack:\n\nlet parts = filePath.split(\"_\");\n\n// The date might be parts[parts.length - 2] = \"20240103\"\n// The time might be parts[parts.length - 1].replace(\".WAV\",\"\") = \"054000\"\n\nlet dateStr = parts[parts.length - 2] || \"20240101\"; // default\nlet timeStr = parts[parts.length - 1] || \"000000.WAV\";\n\ntimeStr = timeStr.replace(\".WAV\",\"\"); // remove extension\n\n// build a timestamp: 'YYYY-MM-DD HH:MM:SS'\nlet year = dateStr.substring(0,4);\nlet month = dateStr.substring(4,6);\nlet day = dateStr.substring(6,8);\n\nlet hour = timeStr.substring(0,2);\nlet minute = timeStr.substring(2,4);\nlet second = timeStr.substring(4,6);\n\n// final timestring\nlet timestr = `${year}-${month}-${day} ${hour}:${minute}:${second}`;\n\n\n// 3) If you only have 1 sensor, sensor_id=1.\n// If you want to parse 'AUVIC_Yirraba_11F' from the file, you can do that here.\n// We'll assume one sensor for now.\n\nlet sensorId = 1;\n\n// 4) Build the SQL Insert.\n// Because user wants the query in the PostgreSQL node, we'll pass an array of parameters.\n\nmsg.params = [\n    timestr,              // $1\n    sensorId,             // $2\n    startSec,             // $3\n    endSec,               // $4\n    row[\"Scientific name\"], // $5\n    row[\"Common name\"],     // $6\n    conf                  // $7\n];\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 160,
        "wires": [
            [
                "postgresqlInsertData"
            ]
        ]
    },
    {
        "id": "postgresqlInsertData",
        "type": "postgresql",
        "z": "csvImportTab",
        "name": "Insert detection row",
        "query": "INSERT INTO sensor_data(\n    time,\n    sensor_id,\n    start_seconds,\n    end_seconds,\n    scientific_name,\n    common_name,\n    confidence\n) VALUES($1, $2, $3, $4, $5, $6, $7);",
        "postgreSQLConfig": "fbd14997310e037a",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 1140,
        "y": 160,
        "wires": [
            [
                "debugCsvInsert"
            ]
        ]
    },
    {
        "id": "debugCsvInsert",
        "type": "debug",
        "z": "csvImportTab",
        "name": "Debug msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 160,
        "wires": []
    },
    {
        "id": "commentFileIn",
        "type": "comment",
        "z": "csvImportTab",
        "name": "Set the CSV file path in 'Read CSV File' node",
        "info": "Update the File In node with your actual CSV path.\nThen Deploy and inject to run.\nAll rows will be inserted into sensor_data with the parse logic in the function node.",
        "x": 210,
        "y": 100,
        "wires": []
    },
    {
        "id": "051a06c2c37f7bef",
        "type": "inject",
        "z": "csvImportTab",
        "name": "Trigger: Import CSV",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "fileInCsv"
            ]
        ]
    },
    {
        "id": "a04218edf1ee1a46",
        "type": "comment",
        "z": "csvImportTab",
        "name": "Optional: Confirm Number of Records Loaded ",
        "info": "",
        "x": 210,
        "y": 240,
        "wires": []
    },
    {
        "id": "c4e42fa4c6b3333c",
        "type": "inject",
        "z": "csvImportTab",
        "name": "Triger: Confirm Data Load",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "f0a11ffbb453e0cc"
            ]
        ]
    },
    {
        "id": "f0a11ffbb453e0cc",
        "type": "postgresql",
        "z": "csvImportTab",
        "name": "",
        "query": "SELECT COUNT(*) AS total_records\nFROM sensor_data;",
        "postgreSQLConfig": "fbd14997310e037a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 390,
        "y": 300,
        "wires": [
            [
                "a9633e3c62dd4430"
            ]
        ]
    },
    {
        "id": "a9633e3c62dd4430",
        "type": "debug",
        "z": "csvImportTab",
        "name": "Debug msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 300,
        "wires": []
    },
    {
        "id": "d9b084b935ad0517",
        "type": "inject",
        "z": "29a92b2b2cca5fd8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "L1/L2/L3",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "04168769110e0757"
            ]
        ]
    },
    {
        "id": "04168769110e0757",
        "type": "mqtt out",
        "z": "29a92b2b2cca5fd8",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "052aec521515b111",
        "x": 350,
        "y": 100,
        "wires": []
    },
    {
        "id": "e99c74958498335f",
        "type": "mqtt in",
        "z": "29a92b2b2cca5fd8",
        "name": "",
        "topic": "L1/L2/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "052aec521515b111",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 160,
        "wires": [
            [
                "55b67ac4ada00c76"
            ]
        ]
    },
    {
        "id": "55b67ac4ada00c76",
        "type": "debug",
        "z": "29a92b2b2cca5fd8",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 160,
        "wires": []
    },
    {
        "id": "683892973307683f",
        "type": "comment",
        "z": "29a92b2b2cca5fd8",
        "name": "Server Configuration",
        "info": "Since containers are connected via \nthe virtual network \"digi_pkg\" under \nthe same stack, they can reach each other \nusing their container name. In this case, the \nname of the Mosquitto container is \n\"digi_pkg-mosquitto-1\".",
        "x": 110,
        "y": 20,
        "wires": []
    }
]